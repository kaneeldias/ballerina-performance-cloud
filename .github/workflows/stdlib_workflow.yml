name: Stdlib Workflow

on:
  workflow_dispatch:
    inputs:
      repo-name:
        description: >
          Name of the repo containing tests. Repo should be in ballerina-platform org.
          Example- module-ballerina-http
        required: true
      tests:
        description: >
          Array of test names
          Example-["hello world","h1_h1_passthrough"]
        required: false
      zipURL:
        description: 'Ballerina Zip Distribution URL'
        required: false
      clusterName:
        description: 'Cluster name'
        default: 'bal-perf-cluster-test'
        required: false
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup custom image
        id: image
        run: |
          echo "::set-output name=custom-image-name::$(cat image.txt)"
      - name: Setup outputs
        id: write
        run: |
          testsInput='${{ github.event.inputs.tests }}'
          if [[ -z $testsInput ]]; then
            repoName=${{ github.event.inputs.repo-name }}
            git clone https://github.com/kaneeldias/$repoName
            if [[ -z $repoName ]]; then
              echo "Github repo should be in `ballerina-platform` org"
              exit 1
            fi
            cd $repoName/load-tests
            tests=$(ls -d */ | cut -f1 -d'/' | jq -R -s -c 'split("\n")[:-1]')
            echo "::set-output name=test::${tests}"
          else
            tests=$(echo $testsInput | jq '.')
            if [[ -z $tests ]]; then
              echo "Invalid json array input for tests"
              exit 1
            fi

            if [[ $tests == "[]" ]]; then
              echo "Empty test case array"
              exit 1
            fi
            tests=${tests//$'\n'/}
            echo "::set-output name=test::${tests}"
          fi
      - name: AZURE LOGIN
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
      - name: Create Cluster
        env:
          AZURE_APP_ID: ${{ secrets.AZURE_APP_ID }}
          AZURE_APP_PASSWORD: ${{ secrets.AZURE_APP_PASSWORD }}
          RESOURCE_GROUP: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
          PPG_ID: "/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/ballerina-performance/providers/Microsoft.Compute/proximityPlacementGroups/${{ secrets.PPG_NAME }}"
        run: |
          az aks create \
              --resource-group "${RESOURCE_GROUP}" \
              --name "${{ github.event.inputs.clusterName }}" \
              --service-principal "${AZURE_APP_ID}"\
              --client-secret "${AZURE_APP_PASSWORD}" \
              --ppg "${PPG_ID}" \
              --node-vm-size "Standard_F16s_v2" \
              --node-osdisk-size 256 \
              --node-osdisk-type Managed \
              --node-count 2 \
              --location "eastus" \
              --generate-ssh-keys
      - name: Configure AKS
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: '${{ github.event.inputs.clusterName }}'
          resource-group: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
      - name: Deploy Niginx
        run: |
          # Create a namespace for your ingress resources
          kubectl create namespace ingress-basic

          # Add the ingress-nginx repository
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx

          # Use Helm to deploy an NGINX ingress controller
          helm install nginx-ingress ingress-nginx/ingress-nginx \
              --namespace ingress-basic \
              --set controller.replicaCount=2 \
              --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
              --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux \
              --set controller.admissionWebhooks.patch.nodeSelector."beta\.kubernetes\.io/os"=linux
          # Wait for ingress ip
          kubectl get service nginx-ingress-ingress-nginx-controller --namespace ingress-basic -w  \
          -o 'go-template={{with .status.loadBalancer.ingress}}{{range .}}{{.ip}}{{"\n"}}{{end}}{{.err}}{{end}}' 2>/dev/null \
          | head -n1
    outputs:
      matrix: ${{ steps.write.outputs.test }}
      custom-image-name: ${{ steps.image.outputs.custom-image-name }}
  run_test:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        test_name: ${{ fromJson(needs.setup.outputs.matrix) }}
        payload: [50]
        users: [60]
    env:
      TEST_NAME: "${{ matrix.test_name }}"
      TEST_ROOT: "load-tests"
    steps:
    - uses: actions/checkout@v2
      with:
        repository: ballerina-platform/${{ github.event.inputs.repo-name }}
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Ballerina Build
      if: ${{ github.event.inputs.zipURL == '' }}
      uses: ballerina-platform/ballerina-action@nightly
      env:
        CI_BUILD: true
        WORKING_DIR: load-tests/${{ matrix.test_name }}/src
      with:
        args:
          build
    - name: Ballerina Build from Distribution ZIP
      if: ${{ github.event.inputs.zipURL != '' }}
      run: |
        echo default login ballerina-bot password ${{ secrets.BALLERINA_BOT_TOKEN }} >> _netrc
        curl --netrc-file _netrc -L -o ballerina-dist.zip ${{ github.event.inputs.zipURL }}
        mkdir ballerina-dist
        unzip -q ballerina-dist.zip -d ballerina-dist
        export CI_BUILD=true
        export BAL_PATH=`pwd`/ballerina-dist
        echo "var ${BAL_PATH}"
        pushd load-tests/${TEST_NAME}/src
        chmod +x $BAL_PATH/bin/bal
        $BAL_PATH/bin/bal build
    - name: Docker push
      run: docker push ballerina/${TEST_NAME}:latest
    - name: Copy artifacts
      run: |
        ls -ltr
        cp -a ${TEST_ROOT}/${TEST_NAME}/src/target/kubernetes/${TEST_NAME}/. ${TEST_ROOT}/${TEST_NAME}/deployment/
    - name: 'Install Kustomize'
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
    - name: 'Run Kustomize'
      run: |
          kustomize build ${TEST_ROOT}/${TEST_NAME}/deployment > ${TEST_ROOT}/${TEST_NAME}/final.yaml
    - name: Configure AKS
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: '${{ github.event.inputs.clusterName }}'
        resource-group: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
    - name: Deploy artifacts
      run: |
        kubectl apply -f ${TEST_ROOT}/${TEST_NAME}/final.yaml
    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: Write values to outputs
      id: write
      run: |
        echo "::set-output name=cluster-ip::$(kubectl get service nginx-ingress-ingress-nginx-controller --namespace ingress-basic -w  \
                                              -o 'go-template={{with .status.loadBalancer.ingress}}{{range .}}{{.ip}}{{"\n"}}{{end}}{{.err}}{{end}}' 2>/dev/null \
                                              | head -n1)"
        echo "::set-output name=scenario-name::${TEST_NAME}"
        echo "::set-output name=vm-name::bal-perf-vm-`echo ${TEST_NAME} | tr '_' '-'`-${{ matrix.users }}-${{ matrix.payload }}-${{ GITHUB.RUN_NUMBER }}"
        echo "::set-output name=git-token::${{ secrets.BALLERINA_BOT_TOKEN }}"
        echo "::set-output name=space-id::${{ secrets.SPACE_ID }}"
        echo "::set-output name=message-key::${{ secrets.MESSAGE_KEY }}"
        echo "::set-output name=chat-token::${{ secrets.CHAT_TOKEN }}"
        echo "::set-output name=custom-image-name::${{ needs.setup.outputs.custom-image-name }}"
        echo "::set-output name=ppg-id::/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/ballerina-performance/providers/Microsoft.Compute/proximityPlacementGroups/${{ secrets.PPG_NAME }}"
    - name: Create VM Instance
      id: vminstance
      uses: azure/CLI@v1
      with:
        azcliversion: 2.0.72
        inlineScript: |
          az vm create --resource-group "${{ secrets.CLUSTER_RESOURCE_GROUP }}"  --name "${{ steps.write.outputs.vm-name }}"  --admin-username "${{ secrets.VM_USER }}" --admin-password "${{ secrets.VM_PWD }}" --location  eastus \
          --image "mi_${{ steps.write.outputs.custom-image-name }}" --tags benchmark-number=${{ steps.write.outputs.vm-name }} --size Standard_F4s_v2 --ppg ${{ steps.write.outputs.ppg-id }} 
          echo "::set-output name=ip-address::$(az vm show -d -g "${{ secrets.CLUSTER_RESOURCE_GROUP }}" -n "${{ steps.write.outputs.vm-name }}" --query publicIps -o tsv)"
    - name: Wait for VM instance
      run: sleep 60s
      shell: bash
    - name: Execute performance tests
      uses: appleboy/ssh-action@master
      env: 
        REPO_NAME: ${{ github.event.inputs.repo-name }}
        IP: ${{ steps.write.outputs.cluster-ip }}
        SCENARIO_NAME: ${{ steps.write.outputs.scenario-name }}
        GITHUB_TOKEN: ${{steps.write.outputs.git-token}}
        SPACE_ID: ${{steps.write.outputs.space-id}}
        MESSAGE_KEY: ${{steps.write.outputs.message-key}}
        CHAT_TOKEN: ${{steps.write.outputs.chat-token}}
        PAYLOAD: ${{ matrix.payload }}
        USERS: ${{ matrix.users }}
      with:
        host: ${{ steps.vminstance.outputs.ip-address }}
        username: ${{ secrets.VM_USER }}
        password: ${{ secrets.VM_PWD }}
        envs: REPO_NAME,IP,SCENARIO_NAME,GITHUB_TOKEN,PAYLOAD,USERS,SPACE_ID,MESSAGE_KEY,CHAT_TOKEN
        command_timeout: '180m' #3 hours
        timeout: 300s #5 mins
        script: |
          source /etc/profile.d/10-perf-vm.sh
          execute-tests.sh -r $REPO_NAME -c $IP -s $SCENARIO_NAME -t $GITHUB_TOKEN -p $PAYLOAD -u $USERS -i $SPACE_ID -m $MESSAGE_KEY -a $CHAT_TOKEN
    - name: Pod logs
      if: always()
      run: |
        kubectl logs -l logs=true
    - name: Undeploy Kubernetes artifacts
      if: always()
      run: |
        kubectl delete -f ${TEST_ROOT}/${TEST_NAME}/final.yaml
    - name: Cleanup VM
      if: always()
      continue-on-error: true
      uses: azure/CLI@v1
      with:
        azcliversion: 2.0.72
        inlineScript: |
          az resource delete --ids $(az resource list --tag benchmark-number=${{ steps.write.outputs.vm-name }} -otable --query "[].id" -otsv)
          var=`az disk list --query "[?tags.\"benchmark-number\"=='${{ steps.write.outputs.vm-name }}'].id" -otable -otsv`
          if [ -n "$var" ]
          then
              az resource delete --ids ${var}
          else 
              echo "Disk is already deleted"
          fi
  cleanup:
    needs: run_test
    name: clean up
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: AZURE LOGIN
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: Cleaning up the cluster
      if: always()
      uses: azure/CLI@v1
      with:
        azcliversion: 2.0.72
        inlineScript: |
          az group delete --name mc_${{ secrets.CLUSTER_RESOURCE_GROUP }}_${{ github.event.inputs.clusterName }}_eastus -y
          az aks delete --name ${{ github.event.inputs.clusterName }} --resource-group ${{ secrets.CLUSTER_RESOURCE_GROUP }} -y
